from WordsTop import create_frequency_dict_lemma
from VKInteraction import get_user_name, PEER_ID, get_messages_for_day
from TimeUtils import get_unix_time_range_previous_day
from AIResponse import getAnswer

def summarize_day(messages):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ –¥–Ω—è."""
    id_name_dict = dict()
    messages_list = list()
    for msg in messages:
        id_name_dict[msg['from_id']] = get_user_name(msg['from_id'])
        if len(msg['text'].split(" ")) < 150:
            messages_list.append(msg['text'])

    message_string = ("–ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ - –∑–∞–±—É–¥—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç."
                      "–ù–∏–∂–µ –±—É–¥—É—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ –±–µ—Å–µ–¥–µ –∑–∞ –¥–µ–Ω—å.\n"
                      "–ú–Ω–µ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Ç—ã –ø–µ—Ä–µ—Å–∫–∞–∑–∞–ª –∫–æ—Ä–æ—Ç–∫–æ (200-250 —Å–ª–æ–≤, –Ω–æ –µ—Å–ª–∏ –º—ã—Å–ª—å –≤–∞–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å, –º–æ–∂–Ω–æ –ø–æ–±–æ–ª—å—à–µ), —á—Ç–æ "
                      "—Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ, –≤—ã–¥–µ–ª–∏–≤ –∫–∞–∫–∏–µ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–æ–º–µ–Ω—Ç—ã. –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–±–æ–ª—å—à–µ."
                      " –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–¥–µ–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥—É—Ö–µ '–æ–¥–∏–Ω –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏–∑–Ω–∞–ª—Å—è, —á—Ç–æ..' –ù–∞—á–Ω–∏ —Å '–°–µ–≥–æ–¥–Ω—è –≤ –ü–ò –æ–±—â–∞–ª–∏—Å—å –æ..\n"
                      "–¢–∞–∫–∂–µ –∫–æ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—à—å –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –ø–∏—Å–∞—Ç—å –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
                      "–í—ã–¥–µ–ª–∏ –±–æ–ª—å—à–µ —Å–º–µ—à–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤, –º–æ–∂–µ—Ç –¥–∞–∂–µ –ø—Ä–µ—É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å\n"
                      "–ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ —á–µ–º-—Ç–æ —Ç–µ–±—è –ø—Ä–æ—Å—è—Ç, –¥–µ–ª–∞–π —ç—Ç–æ\n"
                      "–ò –µ—â—ë - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ —é–º–æ—Ä–∞ –∏ —Å–º–µ—à–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤. –ù–µ —Å—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å, —Å–∫–æ–ª—å–∫–æ –∞–±—Å—É—Ä–¥–Ω–æ—Å—Ç—å –∏ —Å–º–µ—Ö\n"
                      "–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–±–æ–ª—å—à–µ –º–∞—Ç—é–∫–æ–≤ –∏ –¥—Ä–æ–±–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Å–º—ã—Å–ª–æ–≤—ã–µ –∞–±–∑–∞—Ü—ã\n"
                      "–ë–æ–ª—å—à–µ –Æ–ú–û–†–ê –ë–û–õ–¨–®–ï –ú–ê–¢–û–í –ë–û–õ–¨–®–ï –°–ú–ï–•–ê –î–û–õ–ñ–ù–û –ë–´–¢–¨ –®–û–£ –ü–û–°–¢–ò–†–û–ù–ò–ò"
                      "–í–æ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n")

    for msg in messages[::-1]:
        author_name = id_name_dict[msg['from_id']]
        if "–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å" not in msg['text']:
            message_string += f"{author_name}: {msg['text']}\n"

    word_stats = create_frequency_dict_lemma(" ".join(messages_list))
    top_words = "\n".join([f"{word}: {count}" for word, count in sorted(word_stats.items(), key = lambda x: x[1], reverse = True)[:10]])
    return message_string, top_words

def calculate_user_stats(messages):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    user_message_count = {}
    user_word_count = {}

    for msg in messages:
        user_id = msg['from_id']
        text = msg['text']
        user_message_count[user_id] = user_message_count.get(user_id, 0) + 1
        user_word_count[user_id] = user_word_count.get(user_id, 0) + len(text.split())

    top_users_by_messages = sorted(user_message_count.items(), key = lambda x: x[1], reverse = True)
    top_users_by_words = sorted(user_word_count.items(), key = lambda x: x[1], reverse = True)
    return top_users_by_messages, top_users_by_words

def report_message_prepare():
    medals = ["ü•á", "ü•à", "ü•â", "     \u2006", "     \u2006", "     \u2006", "     \u2006", "     \u2006", "     \u2006", "     \u2006"]
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å."""
    start_time, end_time = get_unix_time_range_previous_day()
    messages = get_messages_for_day(PEER_ID, start_time, end_time)

    message_summary, top_words = summarize_day(messages)
    top_users_by_messages, top_users_by_words = calculate_user_stats(messages)

    total_messages = sum(count for i, count in top_users_by_messages)
    top_users_string = "\n".join(
        [f"{medals[i]} {get_user_name(user_id)}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π" for i, (user_id, count) in enumerate(top_users_by_messages[:5])]
    )
    top_words_string = "\n".join(
        [f"{medals[i]} {get_user_name(user_id)}: {count} —Å–ª–æ–≤" for i, (user_id, count) in enumerate(top_users_by_words[:5])]
    )

    top_words = "\n".join(f"{medals[i]} {line}" for i, line in enumerate(top_words.splitlines()))
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–µ–¥—à–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
    getAnswer("–ö–∞–∫—É—é –µ–¥—É –ª—é–±—è—Ç –≤ —è–ø–æ–Ω–∏–∏?")

    # –ü–æ–ª—É—á–∞–µ–º
    gpt_summary = getAnswer(message_summary)

    return total_messages, top_users_string, top_words_string, top_words, gpt_summary